const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function main() {
  try {
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const adminCount = await prisma.admin.count();
    if (adminCount === 0) {
      const hashedPassword = bcrypt.hashSync('admin123', 10);
      await prisma.admin.create({
        data: {
          username: 'admin',
          password: hashedPassword,
        },
      });
      console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('üëç –ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const cityCount = await prisma.city.count();
    if (cityCount === 0) {
      await prisma.city.createMany({
        data: [
          { name: '–ú–æ—Å–∫–≤–∞' },
          { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
          { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
          { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
          { name: '–ö–∞–∑–∞–Ω—å' }
        ]
      });
      console.log('‚úÖ –ì–æ—Ä–æ–¥–∞ —Å–æ–∑–¥–∞–Ω—ã');
    } else {
      console.log('üëç –ì–æ—Ä–æ–¥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤–∞
    const moscow = await prisma.city.findFirst({
      where: { name: '–ú–æ—Å–∫–≤–∞' }
    });

    if (moscow) {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
      const profiles = await prisma.profile.findMany();
      if (profiles.length === 0) {
        await prisma.profile.createMany({
          data: [
            {
              name: '–ê–Ω–Ω–∞',
              age: 25,
              height: 168,
              weight: 55,
              breastSize: 3,
              phone: '+7 (999) 123-45-67',
              description: '–ö—Ä–∞—Å–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∂–¥–µ—Ç —Ç–µ–±—è',
              photos: JSON.stringify(['photo1.jpg', 'photo2.jpg']),
              price1Hour: 4000,
              price2Hours: 7000,
              priceNight: 20000,
              services: JSON.stringify(['–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '–ú–∞—Å—Å–∞–∂']),
              cityId: moscow.id,
              district: '–¶–µ–Ω—Ç—Ä',
              isVerified: true,
              isActive: true
            },
            {
              name: '–ú–∞—Ä–∏—è',
              age: 27,
              height: 170,
              weight: 58,
              breastSize: 2,
              phone: '+7 (999) 987-65-43',
              description: '–û–ø—ã—Ç–Ω–∞—è –∏ —Å—Ç—Ä–∞—Å—Ç–Ω–∞—è',
              photos: JSON.stringify(['photo3.jpg', 'photo4.jpg']),
              price1Hour: 5000,
              price2Hours: 9000,
              priceNight: 25000,
              services: JSON.stringify(['–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '–ê–Ω–∞–ª—å–Ω—ã–π', '–ú–∞—Å—Å–∞–∂']),
              cityId: moscow.id,
              district: '–ê—Ä–±–∞—Ç',
              isVerified: true,
              isActive: true
            }
          ]
        });
        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');
      } else {
        console.log('üëç –ü—Ä–æ—Ñ–∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    const settingsCount = await prisma.settings.count();
    if (settingsCount === 0) {
      await prisma.settings.create({
        data: {
          telegramUsername: 'admin',
          notificationsEnabled: true,
          autoModeration: false,
          defaultCity: '–ú–æ—Å–∫–≤–∞',
          watermarkEnabled: true,
          watermarkText: '@escort',
          minPhotoCount: 3,
          maxPhotoCount: 10,
          defaultPriceHour: 5000,
          defaultPriceTwoHours: 10000,
          defaultPriceNight: 30000
        }
      });
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');
    } else {
      console.log('üëç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();
