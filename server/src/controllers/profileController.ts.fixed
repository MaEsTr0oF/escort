// Добавляем эту функцию в конец файла profileController.ts или модифицируем существующую

export const getProfiles = async (req: Request, res: Response) => {
  try {
    const {
      cityId,
      district,
      services,
      price,
      appearance,
      verification,
      other,
      outcall
    } = req.query;

    // Проверяем наличие токена администратора в заголовках
    const isAdminRequest = req.headers.authorization?.startsWith('Bearer ');

    console.log('Request query:', req.query);
    console.log('Is admin request:', isAdminRequest);

    // Убираем фильтр isActive по умолчанию, чтобы показывать все анкеты на главной странице
    const filters: any = {};

    // Базовые фильтры
    if (cityId) filters.cityId = Number(cityId);
    if (district) filters.district = district as string;

    // Фильтры по ценам
    if (price && typeof price === 'object') {
      const { from, to } = price as any;
      if (from) filters.price1Hour = { gte: Number(from) };
      if (to) filters.price1Hour = { ...filters.price1Hour, lte: Number(to) };
    }

    // Фильтры по внешности
    if (appearance && typeof appearance === 'object') {
      const { age, height, weight, breastSize } = appearance as any;
      if (age) {
        const [minAge, maxAge] = age;
        filters.age = { gte: Number(minAge), lte: Number(maxAge) };
      }
      if (height) {
        const [minHeight, maxHeight] = height;
        filters.height = { gte: Number(minHeight), lte: Number(maxHeight) };
      }
      if (weight) {
        const [minWeight, maxWeight] = weight;
        filters.weight = { gte: Number(minWeight), lte: Number(maxWeight) };
      }
      if (breastSize) {
        const [minBreast, maxBreast] = breastSize;
        filters.breastSize = { gte: Number(minBreast), lte: Number(maxBreast) };
      }
    }

    // Фильтр по услугам
    if (services && Array.isArray(services) && services.length > 0) {
      filters.services = {
        hasSome: services
      };
    }

    // Фильтры верификации
    if (verification && Array.isArray(verification)) {
      verification.forEach(v => {
        switch (v) {
          case 'verified':
            filters.isVerified = true;
            break;
          case 'with_video':
            filters.hasVideo = true;
            break;
          case 'with_reviews':
            filters.hasReviews = true;
            break;
        }
      });
    }

    // Прочие фильтры
    if (other && Array.isArray(other)) {
      other.forEach(o => {
        switch (o) {
          case 'non_smoking':
            filters.isNonSmoking = true;
            break;
          case 'new':
            filters.isNew = true;
            break;
          case '24_hours':
            filters.is24Hours = true;
            break;
        }
      });
    }

    // Фильтр выезда
    if (outcall === 'true') {
      filters.outCall = true;
    }

    // Удаляем undefined значения из фильтров
    Object.keys(filters).forEach(key => {
      if (filters[key] === undefined) {
        delete filters[key];
      }
    });

    console.log('Applied filters:', filters);

    const profiles = await prisma.profile.findMany({
      where: filters,
      include: {
        city: true,
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    console.log(`Found ${profiles.length} profiles`);
    res.json(profiles);
  } catch (error) {
    console.error('Error fetching profiles:', error);
    res.status(500).json({ 
      error: 'Failed to fetch profiles',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};
